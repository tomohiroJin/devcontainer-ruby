var search_data = {"index":{"searchIndex":["myproject","reference","basicssyntax","circle","controlflow","functional","loops","overloaddemo","rectangle","shape","apply_function()","area()","area()","area()","calculate()","check_number()","day_of_week()","define_variables()","description()","description()","double_lambda()","each_loop()","hello()","immutable_array()","is_even()","manipulate_array()","manipulate_hash()","new()","new()","new()","pure_addition()","sum_array()","times_loop()","until_loop()","while_loop()","gemfile","gemfile.lock","license","readme","rakefile"],"longSearchIndex":["myproject","reference","reference::basicssyntax","reference::circle","reference::controlflow","reference::functional","reference::loops","reference::overloaddemo","reference::rectangle","reference::shape","reference::functional#apply_function()","reference::circle#area()","reference::rectangle#area()","reference::shape#area()","reference::overloaddemo#calculate()","reference::controlflow#check_number()","reference::controlflow#day_of_week()","reference::basicssyntax#define_variables()","reference::circle#description()","reference::shape#description()","reference::functional#double_lambda()","reference::loops#each_loop()","myproject::hello()","reference::functional#immutable_array()","reference::controlflow#is_even()","reference::basicssyntax#manipulate_array()","reference::basicssyntax#manipulate_hash()","reference::circle::new()","reference::rectangle::new()","reference::shape::new()","reference::functional#pure_addition()","reference::functional#sum_array()","reference::loops#times_loop()","reference::loops#until_loop()","reference::loops#while_loop()","","","","",""],"info":[["MyProject","","MyProject.html","","<p>Description: A simple Ruby module that returns a string.\n"],["Reference","","Reference.html","","<p>Reference::BasicsSyntax クラスは、Ruby の基本構文を学ぶためのクラスです。\n<p>主な機能:\n<p>変数の定義例\n"],["Reference::BasicsSyntax","","Reference/BasicsSyntax.html","","<p>Ruby の基本構文を学ぶためのクラス\n"],["Reference::Circle","","Reference/Circle.html","","<p>Circle クラスは Shape を継承した円を表すクラス\n<p>使用例:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">circle</span> = <span class=\"ruby-constant\">Reference</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Circle</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">5</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">circle</span>.<span class=\"ruby-identifier\">area</span> <span class=\"ruby-comment\"># =&gt; 78.54 (おおよその値) ...</span>\n</pre>\n"],["Reference::ControlFlow","","Reference/ControlFlow.html","","<p>Ruby の制御構文を学ぶためのクラス\n"],["Reference::Functional","","Reference/Functional.html","",""],["Reference::Loops","","Reference/Loops.html","","<p>Ruby のループ構文を学ぶためのクラス\n"],["Reference::OverloadDemo","","Reference/OverloadDemo.html","","<p>OverloadDemo クラスはオーバーロードの概念を模倣するクラス\n<p>使用例:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">demo</span> = <span class=\"ruby-constant\">Reference</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">OverloadDemo</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">demo</span>.<span class=\"ruby-identifier\">calculate</span>(<span class=\"ruby-value\">4</span>) <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["Reference::Rectangle","","Reference/Rectangle.html","","<p>Rectangle クラスは Shape を継承した長方形を表すクラス\n<p>使用例:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rectangle</span> = <span class=\"ruby-constant\">Reference</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Rectangle</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">rectangle</span>.<span class=\"ruby-identifier\">area</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Reference::Shape","","Reference/Shape.html","","<p>抽象クラス的な役割を持つ Shape クラス\n<p>このクラスは直接インスタンス化できません。継承して使用します。\n<p>サブクラスでの実装が必要なメソッド:\n"],["apply_function","Reference::Functional","Reference/Functional.html#method-i-apply_function","(array, func)","<p>高階関数: 関数を引数として受け取る\n<p>@param array [Array] 処理対象の配列@param func [Proc] 各要素に適用する関数@return [Array] 処理後の配列\n<p>使用例: …\n"],["area","Reference::Circle","Reference/Circle.html#method-i-area","()","<p>面積を計算する\n<p>@return [Float] 円の面積\n"],["area","Reference::Rectangle","Reference/Rectangle.html#method-i-area","()","<p>面積を計算する\n<p>@return [Numeric] 長方形の面積\n"],["area","Reference::Shape","Reference/Shape.html#method-i-area","()","<p>抽象メソッド: 図形の面積を計算する\n<p>サブクラスで必ずオーバーライドする必要があります。\n<p>@raise [NotImplementedError] サブクラスで未実装の場合に発生\n"],["calculate","Reference::OverloadDemo","Reference/OverloadDemo.html#method-i-calculate","(*args)","<p>引数に応じて異なる処理を実行する\n<p>1 引数: 正方形の面積を計算\n<p>2 引数: 長方形の面積を計算\n"],["check_number","Reference::ControlFlow","Reference/ControlFlow.html#method-i-check_number","(number)","<p>if-else の例: 数値を受け取り、その符号を判定します。\n<p>@param number [Numeric] 判定対象の数値@return [String] “positive” (正の数), …\n"],["day_of_week","Reference::ControlFlow","Reference/ControlFlow.html#method-i-day_of_week","(day)","<p>case 文の例: 曜日に応じたメッセージを返します。\n<p>@param day [String] 曜日を表す文字列 (“Monday”, “Saturday”, など) …\n"],["define_variables","Reference::BasicsSyntax","Reference/BasicsSyntax.html#method-i-define_variables","()","<p>変数の定義\n<p>@return [Array] 基本的なデータ型を含む配列\n<p>使用例:\n"],["description","Reference::Circle","Reference/Circle.html#method-i-description","()","<p>図形の説明を返す (オーバーライド)\n<p>@return [String] 図形の説明\n"],["description","Reference::Shape","Reference/Shape.html#method-i-description","()","<p>図形の説明を返す\n<p>サブクラスでオーバーライド可能です。\n<p>@return [String] 図形の説明\n"],["double_lambda","Reference::Functional","Reference/Functional.html#method-i-double_lambda","()","<p>ラムダの例: 要素を 2 倍にするラムダを作成\n<p>@return [Proc] 要素を 2 倍にするラムダ\n<p>使用例:\n"],["each_loop","Reference::Loops","Reference/Loops.html#method-i-each_loop","(array)","<p>each メソッド: 配列の各要素を 2 倍にします。\n<p>@param array [Array&lt;Integer&gt;] 操作対象の配列@return [Array&lt;Integer&gt;] …\n"],["hello","MyProject","MyProject.html#method-c-hello","()",""],["immutable_array","Reference::Functional","Reference/Functional.html#method-i-immutable_array","(array)","<p>イミュータブルなデータ操作: 元のデータを変更せずに操作\n<p>@param array [Array] 処理対象の配列@return [Array] 1 を加えた新しい配列\n<p>使用例:\n"],["is_even","Reference::ControlFlow","Reference/ControlFlow.html#method-i-is_even","(number)","<p>三項演算子の例: 偶数か奇数かを判定します。\n<p>@param number [Integer] 判定対象の数値@return [String] “Even” (偶数), “Odd” …\n"],["manipulate_array","Reference::BasicsSyntax","Reference/BasicsSyntax.html#method-i-manipulate_array","(array)","<p>配列操作\n<p>@param array [Array&lt;Integer&gt;] 操作対象の配列@return [Array&lt;Integer&gt;] 各要素が 2 倍になった配列\n<p>使用例:\n"],["manipulate_hash","Reference::BasicsSyntax","Reference/BasicsSyntax.html#method-i-manipulate_hash","(hash)","<p>ハッシュ操作\n<p>@param hash [Hash&lt;Symbol, String&gt;] 操作対象のハッシュ@return [Hash&lt;String, String&gt;] キーを大文字に変換し、値を文字列化した新しいハッシュ …\n"],["new","Reference::Circle","Reference/Circle.html#method-c-new","(radius)","<p>初期化\n<p>@param radius [Numeric] 半径\n"],["new","Reference::Rectangle","Reference/Rectangle.html#method-c-new","(width, height)","<p>初期化\n<p>@param width [Numeric] 幅@param height [Numeric] 高さ\n"],["new","Reference::Shape","Reference/Shape.html#method-c-new","(name)","<p>初期化\n<p>@param name [String] 図形の名前@raise [NotImplementedError] 直接インスタンス化された場合に発生\n"],["pure_addition","Reference::Functional","Reference/Functional.html#method-i-pure_addition","(a, b)","<p>ピュア関数の例: 副作用がない単純な関数\n<p>@param a [Integer] 足される数@param b [Integer] 足す数@return [Integer] 加算結果\n<p>使用例:\n"],["sum_array","Reference::Functional","Reference/Functional.html#method-i-sum_array","(array)","<p>Enumerable を利用した高階関数の活用\n<p>@param array [Array] 数値の配列@return [Integer] 配列内の数値の合計\n<p>使用例:\n"],["times_loop","Reference::Loops","Reference/Loops.html#method-i-times_loop","(times)","<p>times メソッド: 指定回数だけメッセージを生成します。\n<p>@param times [Integer] 繰り返し回数@return [Array&lt;String&gt;] 各回のメッセージを含む配列 …\n"],["until_loop","Reference::Loops","Reference/Loops.html#method-i-until_loop","(limit)","<p>until ループ: 指定した数までカウントアップします。\n<p>@param limit [Integer] カウントアップの上限値@return [Array&lt;Integer&gt;] カウントアップ結果の配列 …\n"],["while_loop","Reference::Loops","Reference/Loops.html#method-i-while_loop","(count)","<p>while ループ: 指定した数のカウントダウンを返します。\n<p>@param count [Integer] カウントダウンを開始する数@return [Array&lt;Integer&gt;] カウントダウン結果の配列 …\n"],["Gemfile","","Gemfile.html","","<p>source ‘rubygems.org’\n<p># 開発環境専用の gem group :development do\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Solargraph: Ruby Language Server</span>\n<span class=\"ruby-identifier\">gem</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  ast (2.4.2)\n  backport (1.2.0)\n  benchmark (0.3.0)\n  byebug ...</pre>\n"],["LICENSE","","LICENSE.html","","<p>giMIT License\n<p>Copyright © 2024 tomohiro\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>Devcontainer Ruby Reference\n<p>このリポジトリは、Ruby の開発環境を提供し、基本構文から制御構文、クラスの書き方、関数型プログラミングまで幅広い学習をサポートします。RuboCop …\n"],["Rakefile","","Rakefile.html","","<p>require ‘rake’ require ‘rspec/core/rake_task’\n<p># RSpecタスクの設定RSpec::Core::RakeTask.new(:spec) …\n"]]}}