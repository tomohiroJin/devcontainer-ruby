var search_data = {"index":{"searchIndex":["myproject","reference","basicssyntax","circle","controlflow","functional","loops","overloaddemo","patterns","csvprocessor","concreteobserver","dataprocessor","decorator","discountstrategy","emailnotification","jsonprocessor","message","notification","notificationfactory","observer","prefixdecorator","premiumstrategy","pricecalculator","pricingstrategy","smsnotification","simplemessage","standardstrategy","subject","suffixdecorator","rectangle","shape","add_observer()","apply_function()","area()","area()","area()","calculate()","calculate()","calculate()","calculate()","calculate()","calculate()","check_number()","content()","content()","content()","content()","content()","create_notification()","day_of_week()","define_variables()","deliver()","deliver()","deliver()","description()","description()","double_lambda()","each_loop()","hello()","immutable_array()","is_even()","manipulate_array()","manipulate_hash()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","process()","pure_addition()","remove_observer()","set_strategy()","state=()","sum_array()","times_loop()","until_loop()","update()","update()","while_loop()","gemfile","gemfile.lock","license","readme","rakefile","readme"],"longSearchIndex":["myproject","reference","reference::basicssyntax","reference::circle","reference::controlflow","reference::functional","reference::loops","reference::overloaddemo","reference::patterns","reference::patterns::csvprocessor","reference::patterns::concreteobserver","reference::patterns::dataprocessor","reference::patterns::decorator","reference::patterns::discountstrategy","reference::patterns::emailnotification","reference::patterns::jsonprocessor","reference::patterns::message","reference::patterns::notification","reference::patterns::notificationfactory","reference::patterns::observer","reference::patterns::prefixdecorator","reference::patterns::premiumstrategy","reference::patterns::pricecalculator","reference::patterns::pricingstrategy","reference::patterns::smsnotification","reference::patterns::simplemessage","reference::patterns::standardstrategy","reference::patterns::subject","reference::patterns::suffixdecorator","reference::rectangle","reference::shape","reference::patterns::subject#add_observer()","reference::functional#apply_function()","reference::circle#area()","reference::rectangle#area()","reference::shape#area()","reference::overloaddemo#calculate()","reference::patterns::discountstrategy#calculate()","reference::patterns::premiumstrategy#calculate()","reference::patterns::pricecalculator#calculate()","reference::patterns::pricingstrategy#calculate()","reference::patterns::standardstrategy#calculate()","reference::controlflow#check_number()","reference::patterns::decorator#content()","reference::patterns::message#content()","reference::patterns::prefixdecorator#content()","reference::patterns::simplemessage#content()","reference::patterns::suffixdecorator#content()","reference::patterns::notificationfactory#create_notification()","reference::controlflow#day_of_week()","reference::basicssyntax#define_variables()","reference::patterns::emailnotification#deliver()","reference::patterns::notification#deliver()","reference::patterns::smsnotification#deliver()","reference::circle#description()","reference::shape#description()","reference::functional#double_lambda()","reference::loops#each_loop()","myproject::hello()","reference::functional#immutable_array()","reference::controlflow#is_even()","reference::basicssyntax#manipulate_array()","reference::basicssyntax#manipulate_hash()","reference::circle::new()","reference::patterns::concreteobserver::new()","reference::patterns::decorator::new()","reference::patterns::emailnotification::new()","reference::patterns::prefixdecorator::new()","reference::patterns::pricecalculator::new()","reference::patterns::smsnotification::new()","reference::patterns::simplemessage::new()","reference::patterns::subject::new()","reference::patterns::suffixdecorator::new()","reference::rectangle::new()","reference::shape::new()","reference::patterns::dataprocessor#process()","reference::functional#pure_addition()","reference::patterns::subject#remove_observer()","reference::patterns::pricecalculator#set_strategy()","reference::patterns::subject#state=()","reference::functional#sum_array()","reference::loops#times_loop()","reference::loops#until_loop()","reference::patterns::concreteobserver#update()","reference::patterns::observer#update()","reference::loops#while_loop()","","","","","",""],"info":[["MyProject","","MyProject.html","","<p>Description: A simple Ruby module that returns a string.\n"],["Reference","","Reference.html","","<p>Reference::BasicsSyntax クラスは、Ruby の基本構文を学ぶためのクラスです。\n<p>主な機能:\n<p>変数の定義例\n"],["Reference::BasicsSyntax","","Reference/BasicsSyntax.html","","<p>Ruby の基本構文を学ぶためのクラス\n"],["Reference::Circle","","Reference/Circle.html","","<p>Circle クラスは Shape を継承した円を表すクラス\n<p>使用例:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">circle</span> = <span class=\"ruby-constant\">Reference</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Circle</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">5</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">circle</span>.<span class=\"ruby-identifier\">area</span> <span class=\"ruby-comment\"># =&gt; 78.54 (おおよその値) ...</span>\n</pre>\n"],["Reference::ControlFlow","","Reference/ControlFlow.html","","<p>Ruby の制御構文を学ぶためのクラス\n"],["Reference::Functional","","Reference/Functional.html","","<p>関数型プログラミング要素を学ぶためのクラス\n"],["Reference::Loops","","Reference/Loops.html","","<p>Ruby のループ構文を学ぶためのクラス\n"],["Reference::OverloadDemo","","Reference/OverloadDemo.html","","<p>OverloadDemo クラスはオーバーロードの概念を模倣するクラス\n<p>使用例:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">demo</span> = <span class=\"ruby-constant\">Reference</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">OverloadDemo</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">demo</span>.<span class=\"ruby-identifier\">calculate</span>(<span class=\"ruby-value\">4</span>) <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["Reference::Patterns","","Reference/Patterns.html","",""],["Reference::Patterns::CSVProcessor","","Reference/Patterns/CSVProcessor.html","","<p>CSVProcessor クラスは CSV 形式でデータを処理します。\n"],["Reference::Patterns::ConcreteObserver","","Reference/Patterns/ConcreteObserver.html","","<p>ConcreteObserver は Observer インターフェースを実装した具体的な観察者クラスです。\n"],["Reference::Patterns::DataProcessor","","Reference/Patterns/DataProcessor.html","","<p>DataProcessor クラスはデータ処理のテンプレートを提供します。\n<p>具体的な処理の一部はサブクラスで実装します。\n"],["Reference::Patterns::Decorator","","Reference/Patterns/Decorator.html","","<p>Decorator クラスはメッセージの振る舞いを拡張します。\n<p>このクラス自体は抽象クラスとして機能します。\n"],["Reference::Patterns::DiscountStrategy","","Reference/Patterns/DiscountStrategy.html","","<p>割引料金の計算アルゴリズム\n"],["Reference::Patterns::EmailNotification","","Reference/Patterns/EmailNotification.html","","<p>EmailNotification クラスはメール通知を表します。\n"],["Reference::Patterns::JSONProcessor","","Reference/Patterns/JSONProcessor.html","","<p>JSONProcessor クラスは JSON 形式でデータを処理します。\n"],["Reference::Patterns::Message","","Reference/Patterns/Message.html","","<p>メッセージのインターフェース\n<p>すべてのメッセージクラスが実装するべきメソッドを定義します。\n"],["Reference::Patterns::Notification","","Reference/Patterns/Notification.html","","<p>Notification インターフェース\n<p>すべての通知クラスが実装するべきメソッドを定義します。\n"],["Reference::Patterns::NotificationFactory","","Reference/Patterns/NotificationFactory.html","","<p>NotificationFactory クラスは通知オブジェクトを生成する工場クラスです。\n"],["Reference::Patterns::Observer","","Reference/Patterns/Observer.html","","<p>Observer インターフェース\n<p>すべての観察者が実装するべきメソッドを定義します。\n"],["Reference::Patterns::PrefixDecorator","","Reference/Patterns/PrefixDecorator.html","","<p>プレフィックスを追加する装飾クラス\n"],["Reference::Patterns::PremiumStrategy","","Reference/Patterns/PremiumStrategy.html","","<p>プレミアム料金の計算アルゴリズム\n"],["Reference::Patterns::PriceCalculator","","Reference/Patterns/PriceCalculator.html","","<p>戦略を動的に切り替えるためのクラス\n"],["Reference::Patterns::PricingStrategy","","Reference/Patterns/PricingStrategy.html","","<p>戦略のインターフェース\n<p>各料金計算アルゴリズムはこのインターフェースを実装します。\n"],["Reference::Patterns::SMSNotification","","Reference/Patterns/SMSNotification.html","","<p>SMSNotification クラスは SMS 通知を表します。\n"],["Reference::Patterns::SimpleMessage","","Reference/Patterns/SimpleMessage.html","","<p>シンプルなメッセージを表すクラス\n"],["Reference::Patterns::StandardStrategy","","Reference/Patterns/StandardStrategy.html","","<p>標準料金の計算アルゴリズム\n"],["Reference::Patterns::Subject","","Reference/Patterns/Subject.html","","<p>Subject クラスは、状態を持ち、それを観察するオブジェクトを管理します。\n"],["Reference::Patterns::SuffixDecorator","","Reference/Patterns/SuffixDecorator.html","","<p>サフィックスを追加する装飾クラス\n"],["Reference::Rectangle","","Reference/Rectangle.html","","<p>Rectangle クラスは Shape を継承した長方形を表すクラス\n<p>使用例:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rectangle</span> = <span class=\"ruby-constant\">Reference</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Rectangle</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">rectangle</span>.<span class=\"ruby-identifier\">area</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Reference::Shape","","Reference/Shape.html","","<p>抽象クラス的な役割を持つ Shape クラス\n<p>このクラスは直接インスタンス化できません。継承して使用します。\n<p>サブクラスでの実装が必要なメソッド:\n"],["add_observer","Reference::Patterns::Subject","Reference/Patterns/Subject.html#method-i-add_observer","(observer)","<p>観察者を登録します。\n<p>@param observer [Observer] 登録する観察者\n"],["apply_function","Reference::Functional","Reference/Functional.html#method-i-apply_function","(array, func)","<p>高階関数: 関数を引数として受け取る\n<p>@param array [Array] 処理対象の配列@param func [Proc] 各要素に適用する関数@return [Array] 処理後の配列\n<p>使用例: …\n"],["area","Reference::Circle","Reference/Circle.html#method-i-area","()","<p>面積を計算する\n<p>@return [Float] 円の面積\n"],["area","Reference::Rectangle","Reference/Rectangle.html#method-i-area","()","<p>面積を計算する\n<p>@return [Numeric] 長方形の面積\n"],["area","Reference::Shape","Reference/Shape.html#method-i-area","()","<p>抽象メソッド: 図形の面積を計算する\n<p>サブクラスで必ずオーバーライドする必要があります。\n<p>@raise [NotImplementedError] サブクラスで未実装の場合に発生\n"],["calculate","Reference::OverloadDemo","Reference/OverloadDemo.html#method-i-calculate","(*args)","<p>引数に応じて異なる処理を実行する\n<p>1 引数: 正方形の面積を計算\n<p>2 引数: 長方形の面積を計算\n"],["calculate","Reference::Patterns::DiscountStrategy","Reference/Patterns/DiscountStrategy.html#method-i-calculate","(base_price)","<p>商品の価格を 20% 割引します。\n<p>@param base_price [Numeric] 元の価格@return [Numeric] 計算後の価格\n"],["calculate","Reference::Patterns::PremiumStrategy","Reference/Patterns/PremiumStrategy.html#method-i-calculate","(base_price)","<p>商品の価格を 50% 増加します。\n<p>@param base_price [Numeric] 元の価格@return [Numeric] 計算後の価格\n"],["calculate","Reference::Patterns::PriceCalculator","Reference/Patterns/PriceCalculator.html#method-i-calculate","(base_price)","<p>商品の価格を計算します。\n<p>@param base_price [Numeric] 元の価格@return [Numeric] 計算後の価格\n"],["calculate","Reference::Patterns::PricingStrategy","Reference/Patterns/PricingStrategy.html#method-i-calculate","(base_price)","<p>商品の価格を計算する\n<p>@param base_price [Numeric] 元の価格@return [Numeric] 計算後の価格\n"],["calculate","Reference::Patterns::StandardStrategy","Reference/Patterns/StandardStrategy.html#method-i-calculate","(base_price)","<p>商品の価格をそのまま返します。\n<p>@param base_price [Numeric] 元の価格@return [Numeric] 計算後の価格\n"],["check_number","Reference::ControlFlow","Reference/ControlFlow.html#method-i-check_number","(number)","<p>if-else の例: 数値を受け取り、その符号を判定します。\n<p>@param number [Numeric] 判定対象の数値@return [String] “positive” (正の数), …\n"],["content","Reference::Patterns::Decorator","Reference/Patterns/Decorator.html#method-i-content","()","<p>デコレートされたメッセージの内容を取得します。\n<p>@return [String] メッセージの内容\n"],["content","Reference::Patterns::Message","Reference/Patterns/Message.html#method-i-content","()","<p>メッセージの内容を取得します。\n<p>@return [String] メッセージの内容\n"],["content","Reference::Patterns::PrefixDecorator","Reference/Patterns/PrefixDecorator.html#method-i-content","()","<p>プレフィックスを付与したメッセージを返します。\n<p>@return [String] プレフィックス付きのメッセージ\n"],["content","Reference::Patterns::SimpleMessage","Reference/Patterns/SimpleMessage.html#method-i-content","()","<p>メッセージの内容を返します。\n<p>@return [String] メッセージの内容\n"],["content","Reference::Patterns::SuffixDecorator","Reference/Patterns/SuffixDecorator.html#method-i-content","()","<p>サフィックスを付与したメッセージを返します。\n<p>@return [String] サフィックス付きのメッセージ\n"],["create_notification","Reference::Patterns::NotificationFactory","Reference/Patterns/NotificationFactory.html#method-i-create_notification","(type, message)","<p>指定された種類の通知オブジェクトを生成します。\n<p>@param type [Symbol] 通知の種類 (:email, :sms) @param message [String] 通知メッセージ@return …\n"],["day_of_week","Reference::ControlFlow","Reference/ControlFlow.html#method-i-day_of_week","(day)","<p>case 文の例: 曜日に応じたメッセージを返します。\n<p>@param day [String] 曜日を表す文字列 (“Monday”, “Saturday”, など) …\n"],["define_variables","Reference::BasicsSyntax","Reference/BasicsSyntax.html#method-i-define_variables","()","<p>変数の定義\n<p>@return [Array] 基本的なデータ型を含む配列\n<p>使用例:\n"],["deliver","Reference::Patterns::EmailNotification","Reference/Patterns/EmailNotification.html#method-i-deliver","()","<p>メールを配信します。\n<p>@return [String] 配信結果\n"],["deliver","Reference::Patterns::Notification","Reference/Patterns/Notification.html#method-i-deliver","()","<p>通知を配信します。\n<p>@return [String] 配信結果\n"],["deliver","Reference::Patterns::SMSNotification","Reference/Patterns/SMSNotification.html#method-i-deliver","()","<p>SMS を配信します。\n<p>@return [String] 配信結果\n"],["description","Reference::Circle","Reference/Circle.html#method-i-description","()","<p>図形の説明を返す (オーバーライド)\n<p>@return [String] 図形の説明\n"],["description","Reference::Shape","Reference/Shape.html#method-i-description","()","<p>図形の説明を返す\n<p>サブクラスでオーバーライド可能です。\n<p>@return [String] 図形の説明\n"],["double_lambda","Reference::Functional","Reference/Functional.html#method-i-double_lambda","()","<p>ラムダの例: 要素を 2 倍にするラムダを作成\n<p>@return [Proc] 要素を 2 倍にするラムダ\n<p>使用例:\n"],["each_loop","Reference::Loops","Reference/Loops.html#method-i-each_loop","(array)","<p>each メソッド: 配列の各要素を 2 倍にします。\n<p>@param array [Array&lt;Integer&gt;] 操作対象の配列@return [Array&lt;Integer&gt;] …\n"],["hello","MyProject","MyProject.html#method-c-hello","()",""],["immutable_array","Reference::Functional","Reference/Functional.html#method-i-immutable_array","(array)","<p>イミュータブルなデータ操作: 元のデータを変更せずに操作\n<p>@param array [Array] 処理対象の配列@return [Array] 1 を加えた新しい配列\n<p>使用例:\n"],["is_even","Reference::ControlFlow","Reference/ControlFlow.html#method-i-is_even","(number)","<p>三項演算子の例: 偶数か奇数かを判定します。\n<p>@param number [Integer] 判定対象の数値@return [String] “Even” (偶数), “Odd” …\n"],["manipulate_array","Reference::BasicsSyntax","Reference/BasicsSyntax.html#method-i-manipulate_array","(array)","<p>配列操作\n<p>@param array [Array&lt;Integer&gt;] 操作対象の配列@return [Array&lt;Integer&gt;] 各要素が 2 倍になった配列\n<p>使用例:\n"],["manipulate_hash","Reference::BasicsSyntax","Reference/BasicsSyntax.html#method-i-manipulate_hash","(hash)","<p>ハッシュ操作\n<p>@param hash [Hash&lt;Symbol, String&gt;] 操作対象のハッシュ@return [Hash&lt;String, String&gt;] キーを大文字に変換し、値を文字列化した新しいハッシュ …\n"],["new","Reference::Circle","Reference/Circle.html#method-c-new","(radius)","<p>初期化\n<p>@param radius [Numeric] 半径\n"],["new","Reference::Patterns::ConcreteObserver","Reference/Patterns/ConcreteObserver.html#method-c-new","(name)",""],["new","Reference::Patterns::Decorator","Reference/Patterns/Decorator.html#method-c-new","(message)",""],["new","Reference::Patterns::EmailNotification","Reference/Patterns/EmailNotification.html#method-c-new","(message)",""],["new","Reference::Patterns::PrefixDecorator","Reference/Patterns/PrefixDecorator.html#method-c-new","(message, prefix)",""],["new","Reference::Patterns::PriceCalculator","Reference/Patterns/PriceCalculator.html#method-c-new","(strategy)","<p>初期化\n<p>@param strategy [PricingStrategy] 初期の計算戦略\n"],["new","Reference::Patterns::SMSNotification","Reference/Patterns/SMSNotification.html#method-c-new","(message)",""],["new","Reference::Patterns::SimpleMessage","Reference/Patterns/SimpleMessage.html#method-c-new","(text)",""],["new","Reference::Patterns::Subject","Reference/Patterns/Subject.html#method-c-new","()",""],["new","Reference::Patterns::SuffixDecorator","Reference/Patterns/SuffixDecorator.html#method-c-new","(message, suffix)",""],["new","Reference::Rectangle","Reference/Rectangle.html#method-c-new","(width, height)","<p>初期化\n<p>@param width [Numeric] 幅@param height [Numeric] 高さ\n"],["new","Reference::Shape","Reference/Shape.html#method-c-new","(name)","<p>初期化\n<p>@param name [String] 図形の名前@raise [NotImplementedError] 直接インスタンス化された場合に発生\n"],["process","Reference::Patterns::DataProcessor","Reference/Patterns/DataProcessor.html#method-i-process","(data)","<p>データを処理するテンプレートメソッド\n<p>@param data [Array&lt;String&gt;] 処理対象のデータ\n"],["pure_addition","Reference::Functional","Reference/Functional.html#method-i-pure_addition","(first_number, second_number)","<p>ピュア関数の例: 副作用がない単純な関数\n<p>@param first_number [Integer] 足される数@param second_number [Integer] 足す数@return [Integer] …\n"],["remove_observer","Reference::Patterns::Subject","Reference/Patterns/Subject.html#method-i-remove_observer","(observer)","<p>観察者を削除します。\n<p>@param observer [Observer] 削除する観察者\n"],["set_strategy","Reference::Patterns::PriceCalculator","Reference/Patterns/PriceCalculator.html#method-i-set_strategy","(strategy)","<p>計算戦略を設定します。\n<p>@param strategy [PricingStrategy] 新しい計算戦略\n"],["state=","Reference::Patterns::Subject","Reference/Patterns/Subject.html#method-i-state-3D","(new_state)","<p>状態を更新し、すべての観察者に通知します。\n<p>@param new_state [String] 新しい状態\n"],["sum_array","Reference::Functional","Reference/Functional.html#method-i-sum_array","(array)","<p>Enumerable を利用した高階関数の活用\n<p>@param array [Array] 数値の配列@return [Integer] 配列内の数値の合計\n<p>使用例:\n"],["times_loop","Reference::Loops","Reference/Loops.html#method-i-times_loop","(times)","<p>times メソッド: 指定回数だけメッセージを生成します。\n<p>@param times [Integer] 繰り返し回数@return [Array&lt;String&gt;] 各回のメッセージを含む配列 …\n"],["until_loop","Reference::Loops","Reference/Loops.html#method-i-until_loop","(limit)","<p>until ループ: 指定した数までカウントアップします。\n<p>@param limit [Integer] カウントアップの上限値@return [Array&lt;Integer&gt;] カウントアップ結果の配列 …\n"],["update","Reference::Patterns::ConcreteObserver","Reference/Patterns/ConcreteObserver.html#method-i-update","(subject)","<p>状態が更新された際に呼び出されます。\n<p>@param subject [Subject] 状態を持つ Subject オブジェクト\n"],["update","Reference::Patterns::Observer","Reference/Patterns/Observer.html#method-i-update","(subject)","<p>状態が更新された際に呼び出されるメソッド\n<p>@param subject [Subject] 状態を持つ Subject オブジェクト\n"],["while_loop","Reference::Loops","Reference/Loops.html#method-i-while_loop","(count)","<p>while ループ: 指定した数のカウントダウンを返します。\n<p>@param count [Integer] カウントダウンを開始する数@return [Array&lt;Integer&gt;] カウントダウン結果の配列 …\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source ‘rubygems.org’\n<p># 開発環境専用の gem group :development do\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  ast (2.4.2)\n  backport (1.2.0)\n  benchmark (0.3.0)\n  byebug ...</pre>\n"],["LICENSE","","LICENSE.html","","<p>giMIT License\n<p>Copyright © 2024 tomohiro\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>Devcontainer Ruby Reference\n<p>このリポジトリは、Ruby の開発環境を提供し、基本構文から制御構文、クラスの書き方、関数型プログラミングまで幅広い学習をサポートします。RuboCop …\n"],["Rakefile","","Rakefile.html","","<p># frozen_string_literal: true\n<p>require ‘rake’ require ‘rspec/core/rake_task’\n<p># RSpecタスクの設定RSpec::Core::RakeTask.new(:spec) …\n"],["README","","lib/reference/patterns/README_md.html","","<p>デザインパターン\n<p>このプロジェクトでは、Ruby を使った 5 種類の基本的なデザインパターンの実装例を提供しています。各デザインパターンの概要、使用例、および詳細な RDoc ドキュメントへのリンクを以下に示します。 …\n"]]}}